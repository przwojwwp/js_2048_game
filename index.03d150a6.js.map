{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n/* eslint-disable brace-style */ /* eslint-disable prettier/prettier */ \"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\n/* eslint-disable max-len */ /* eslint-disable prettier/prettier */ /* eslint-disable brace-style */ function $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.initialState = initialState;\n        this.initialStateRestart = initialState ? initialState.map(function(row) {\n            return row.map(function(cell) {\n                return cell;\n            });\n        }) : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.isMerged = [\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ]\n        ];\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 1; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                        var k = j;\n                        while(k > 0 && (this.state[i][k - 1] === 0 || this.state[i][k - 1] === this.state[i][k])){\n                            if (this.state[i][k - 1] === 0) {\n                                this.state[i][k - 1] = this.state[i][k];\n                                this.state[i][k] = 0;\n                                moved = true;\n                                k--;\n                            } else if (this.state[i][k - 1] === this.state[i][k] && !this.isMerged[i][k - 1]) {\n                                this.state[i][k - 1] *= 2;\n                                this.state[i][k] = 0;\n                                this.score += this.state[i][k - 1];\n                                this.isMerged[i][k - 1] = true;\n                                moved = true;\n                            } else break;\n                        }\n                    }\n                }\n                if (moved) {\n                    this.isMerged.forEach(function(row) {\n                        return row.fill(false);\n                    });\n                    this.generateNewTiles();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = this.state[i].length - 2; j >= 0; j--)if (this.state[i][j] !== 0) {\n                        var k = j;\n                        while(k < this.state[i].length - 1 && (this.state[i][k + 1] === 0 || this.state[i][k + 1] === this.state[i][k])){\n                            if (this.state[i][k + 1] === 0) {\n                                this.state[i][k + 1] = this.state[i][k];\n                                this.state[i][k] = 0;\n                                moved = true;\n                                k++;\n                            } else if (this.state[i][k + 1] === this.state[i][k] && !this.isMerged[i][k + 1]) {\n                                this.state[i][k + 1] *= 2;\n                                this.score += this.state[i][k + 1];\n                                this.state[i][k] = 0;\n                                moved = true;\n                                this.isMerged[i][k + 1] = true;\n                            } else break;\n                        }\n                    }\n                }\n                if (moved) {\n                    this.isMerged.forEach(function(row) {\n                        return row.fill(false);\n                    });\n                    this.generateNewTiles();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = 1; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                        var k = i;\n                        while(k > 0 && (this.state[k - 1][j] === 0 || this.state[k - 1][j] === this.state[k][j])){\n                            if (this.state[k - 1][j] === 0) {\n                                this.state[k - 1][j] = this.state[k][j];\n                                this.state[k][j] = 0;\n                                moved = true;\n                                k--;\n                            } else if (this.state[k - 1][j] === this.state[k][j] && !this.isMerged[k - 1][j]) {\n                                this.state[k - 1][j] *= 2;\n                                this.score += this.state[k - 1][j];\n                                this.state[k][j] = 0;\n                                moved = true;\n                                this.isMerged[k - 1][j] = true;\n                            } else break;\n                        }\n                    }\n                }\n                if (moved) {\n                    this.isMerged.forEach(function(row) {\n                        return row.fill(false);\n                    });\n                    this.generateNewTiles();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (this.status !== \"playing\") return;\n                var moved = false;\n                for(var i = this.state.length - 2; i >= 0; i--){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                        var k = i;\n                        while(k < this.state.length - 1 && (this.state[k + 1][j] === 0 || this.state[k + 1][j] === this.state[k][j])){\n                            if (this.state[k + 1][j] === 0) {\n                                this.state[k + 1][j] = this.state[k][j];\n                                this.state[k][j] = 0;\n                                moved = true;\n                                k++;\n                            } else if (this.state[k + 1][j] === this.state[k][j] && !this.isMerged[k + 1][j]) {\n                                this.state[k + 1][j] *= 2;\n                                this.score += this.state[k + 1][j];\n                                this.state[k][j] = 0;\n                                moved = true;\n                                this.isMerged[k + 1][j] = true;\n                            } else break;\n                        }\n                    }\n                }\n                if (moved) {\n                    this.isMerged.forEach(function(row) {\n                        return row.fill(false);\n                    });\n                    this.generateNewTiles();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                this.getStatus();\n                return this.state;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.state.some(function(row) {\n                    return row.includes(2048);\n                })) this.status = \"win\";\n                if (!this.canMove()) this.status = \"lose\";\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.generateNewTiles();\n                this.generateNewTiles();\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.score = 0;\n                this.status = \"idle\";\n                this.state = this.initialStateRestart.map(function(row) {\n                    return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n                });\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"generateNewTiles\",\n            value: function generateNewTiles() {\n                if (this.status === \"win\" || this.status === \"lose\") return;\n                var emptyCells = [];\n                for(var i = 0; i < this.state.length; i++){\n                    for(var j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                        row: i,\n                        col: j\n                    });\n                }\n                if (emptyCells.length > 0) {\n                    var randomIndex = Math.floor(Math.random() * emptyCells.length);\n                    var _emptyCells_randomIndex = emptyCells[randomIndex], row = _emptyCells_randomIndex.row, col = _emptyCells_randomIndex.col;\n                    this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            key: \"canMove\",\n            value: function canMove() {\n                for(var i = 0; i < this.state.length; i++)for(var j = 0; j < this.state[i].length; j++){\n                    if (this.state[i][j] === 0 || j < this.state[i].length - 1 && this.state[i][j] === this.state[i][j + 1] || i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j]) return true;\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// Write your code here\nfunction $197cd56b15c33885$var$initializeGame() {\n    var buttonStart = document.querySelector(\".start\");\n    buttonStart.addEventListener(\"click\", function() {\n        if (buttonStart.classList.contains(\"start\")) {\n            $197cd56b15c33885$var$game.start();\n            buttonStart.classList.remove(\"start\");\n            buttonStart.classList.add(\"restart\");\n            buttonStart.textContent = \"Restart\";\n        } else {\n            $197cd56b15c33885$var$game.restart();\n            buttonStart.classList.remove(\"restart\");\n            buttonStart.classList.add(\"start\");\n            buttonStart.textContent = \"Start\";\n        }\n        $197cd56b15c33885$var$updateUI();\n    });\n    document.addEventListener(\"keydown\", function(eventKey) {\n        if ([\n            \"ArrowLeft\",\n            \"ArrowRight\",\n            \"ArrowUp\",\n            \"ArrowDown\"\n        ].includes(eventKey.key)) eventKey.preventDefault();\n        if ($197cd56b15c33885$var$game.getStatus() === \"playing\") {\n            switch(eventKey.key){\n                case \"ArrowLeft\":\n                    $197cd56b15c33885$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $197cd56b15c33885$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $197cd56b15c33885$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $197cd56b15c33885$var$game.moveDown();\n                    break;\n            }\n            $197cd56b15c33885$var$updateUI();\n            $197cd56b15c33885$var$game.getStatus();\n        }\n    });\n}\nfunction $197cd56b15c33885$var$updateUI() {\n    var scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n    var state = $197cd56b15c33885$var$game.getState();\n    var cells = document.querySelectorAll(\".field-cell\");\n    var index = 0;\n    for(var i = 0; i < state.length; i++)for(var j = 0; j < state[i].length; j++){\n        cells[index].textContent = state[i][j] !== 0 ? state[i][j] : \"\";\n        cells[index].className = \"field-cell\";\n        if (state[i][j] !== 0) cells[index].classList.add(\"field-cell--\".concat(state[i][j]));\n        index++;\n    }\n    var gameStatus = $197cd56b15c33885$var$game.getStatus();\n    var messageStart = document.querySelector(\".message-start\");\n    var messageWin = document.querySelector(\".message-win\");\n    var messageLose = document.querySelector(\".message-lose\");\n    if (gameStatus === \"playing\") messageStart.classList.add(\"hidden\");\n    else if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n    else {\n        messageStart.classList.remove(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", $197cd56b15c33885$var$initializeGame);\n\n})();\n//# sourceMappingURL=index.03d150a6.js.map\n","/* eslint-disable brace-style */\n/* eslint-disable prettier/prettier */\n'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nfunction initializeGame()\n{\n  const buttonStart = document.querySelector('.start');\n\n  buttonStart.addEventListener('click', () =>\n  {\n    if (buttonStart.classList.contains('start'))\n    {\n      game.start();\n      buttonStart.classList.remove('start');\n      buttonStart.classList.add('restart');\n      buttonStart.textContent = 'Restart';\n    }\n    else\n    {\n      game.restart();\n      buttonStart.classList.remove('restart');\n      buttonStart.classList.add('start');\n      buttonStart.textContent = 'Start';\n    }\n\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (eventKey) =>\n  {\n    if (\n      ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(eventKey.key)\n    )\n    {\n      eventKey.preventDefault();\n    }\n\n    if (game.getStatus() === 'playing')\n    {\n      switch (eventKey.key)\n      {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n      }\n      updateUI();\n      game.getStatus();\n    }\n  });\n}\n\nfunction updateUI()\n{\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = game.getScore();\n\n  const state = game.getState();\n\n  const cells = document.querySelectorAll('.field-cell');\n  let index = 0;\n\n  for (let i = 0; i < state.length; i++)\n  {\n    for (let j = 0; j < state[i].length; j++)\n    {\n      cells[index].textContent = state[i][j] !== 0 ? state[i][j] : '';\n      cells[index].className = 'field-cell';\n\n      if (state[i][j] !== 0)\n      {\n        cells[index].classList.add(`field-cell--${state[i][j]}`);\n      }\n      index++;\n    }\n  }\n\n  const gameStatus = game.getStatus();\n\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  if (gameStatus === 'playing')\n  {\n    messageStart.classList.add('hidden');\n  }\n  else if (gameStatus === 'win')\n  {\n    messageWin.classList.remove('hidden');\n  }\n  else if (gameStatus === 'lose')\n  {\n    messageLose.classList.remove('hidden');\n  }\n  else\n  {\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n","/* eslint-disable max-len */\n/* eslint-disable prettier/prettier */\n/* eslint-disable brace-style */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game\n{\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState)\n  {\n    this.initialState = initialState;\n\n    this.initialStateRestart = initialState ? initialState.map(row => row.map(cell => cell)) : [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.state = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle';\n\n    this.isMerged = [\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n    ];\n  }\n\n  moveLeft()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = 1; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = j;\n\n          while (k > 0 && (this.state[i][k - 1] === 0 || this.state[i][k - 1] === this.state[i][k]))\n          {\n            if (this.state[i][k - 1] === 0)\n            {\n              this.state[i][k - 1] = this.state[i][k];\n              this.state[i][k] = 0;\n              moved = true;\n              k--;\n            }\n            else if (this.state[i][k - 1] === this.state[i][k] && !this.isMerged[i][k - 1])\n            {\n              this.state[i][k - 1] *= 2;\n              this.state[i][k] = 0;\n              this.score += this.state[i][k - 1];\n              this.isMerged[i][k - 1] = true;\n              moved = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n  }\n\n  moveRight()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = this.state[i].length - 2; j >= 0; j--)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = j;\n\n          while (k < this.state[i].length - 1 && (this.state[i][k + 1] === 0 || this.state[i][k + 1] === this.state[i][k]))\n          {\n            if (this.state[i][k + 1] === 0)\n            {\n              this.state[i][k + 1] = this.state[i][k];\n              this.state[i][k] = 0;\n              moved = true;\n              k++;\n            }\n            else if (this.state[i][k + 1] === this.state[i][k] && !this.isMerged[i][k + 1])\n            {\n              this.state[i][k + 1] *= 2;\n              this.score += this.state[i][k + 1];\n              this.state[i][k] = 0;\n              moved = true;\n              this.isMerged[i][k + 1] = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n  }\n\n  moveUp()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 1; i < this.state.length; i++)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = i;\n\n          while (k > 0 && (this.state[k - 1][j] === 0 || this.state[k - 1][j] === this.state[k][j]))\n          {\n            if (this.state[k - 1][j] === 0)\n            {\n              this.state[k - 1][j] = this.state[k][j];\n              this.state[k][j] = 0;\n              moved = true;\n              k--;\n            }\n            else if (this.state[k - 1][j] === this.state[k][j] && !this.isMerged[k - 1][j])\n            {\n              this.state[k - 1][j] *= 2;\n              this.score += this.state[k - 1][j];\n              this.state[k][j] = 0;\n              moved = true;\n              this.isMerged[k - 1][j] = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n  }\n\n  moveDown()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = this.state.length - 2; i >= 0; i--)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = i;\n\n          while (k < this.state.length - 1 && (this.state[k + 1][j] === 0 || this.state[k + 1][j] === this.state[k][j]))\n          {\n            if (this.state[k + 1][j] === 0)\n            {\n              this.state[k + 1][j] = this.state[k][j];\n              this.state[k][j] = 0;\n              moved = true;\n              k++;\n            }\n            else if (this.state[k + 1][j] === this.state[k][j] && !this.isMerged[k + 1][j])\n            {\n              this.state[k + 1][j] *= 2;\n              this.score += this.state[k + 1][j];\n              this.state[k][j] = 0;\n              moved = true;\n              this.isMerged[k + 1][j] = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore()\n  {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState()\n  {\n    this.getStatus();\n\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus()\n  {\n    if (this.state.some(row => row.includes(2048)))\n    {\n      this.status = 'win';\n    }\n\n    if (!this.canMove())\n    {\n      this.status = 'lose';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start()\n  {\n    this.status = 'playing';\n    this.generateNewTiles();\n    this.generateNewTiles();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart()\n  {\n    this.score = 0;\n    this.status = 'idle';\n    this.state = this.initialStateRestart.map(row => [...row]);\n  }\n\n  // Add your own methods here\n  generateNewTiles()\n  {\n\n    if (this.status === 'win' || this.status === 'lose')\n    {\n      return;\n    }\n\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] === 0)\n        {\n          emptyCells.push({\n            row: i,\n            col: j,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0)\n    {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  canMove()\n  {\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (\n          this.state[i][j] === 0\n          || (j < this.state[i].length - 1 && this.state[i][j] === this.state[i][j + 1])\n          || (i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j])\n        )\n        {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$c3b10a83b523f372$export$79e617b1955a2616","arr","len","length","i","arr2","Array","$197cd56b15c33885$var$game","protoProps","Game","initialState","instance","Constructor","TypeError","initialStateRestart","map","row","cell","state","score","status","isMerged","key","value","moved","j","k","forEach","fill","generateNewTiles","getStatus","some","includes","canMove","isArray","iter","Symbol","iterator","from","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","emptyCells","push","col","randomIndex","Math","floor","random","_emptyCells_randomIndex","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$updateUI","scoreElement","document","querySelector","textContent","getScore","getState","cells","querySelectorAll","index","className","classList","add","concat","gameStatus","messageStart","messageWin","messageLose","remove","addEventListener","buttonStart","contains","start","restart","eventKey","preventDefault","moveLeft","moveRight","moveUp","moveDown"],"version":3,"file":"index.03d150a6.js.map"}