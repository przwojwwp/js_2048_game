{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["/* eslint-disable brace-style */ /* eslint-disable prettier/prettier */ \"use strict\";\nvar $a5fd07fa01589658$exports = {};\n/* eslint-disable max-len */ /* eslint-disable prettier/prettier */ /* eslint-disable brace-style */ \"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ constructor(initialState){\n        this.initialState = initialState;\n        this.initialStateRestart = initialState ? initialState.map((row)=>row.map((cell)=>cell)) : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.score = 0;\n        this.status = \"idle\";\n        this.isMerged = [\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ],\n            [\n                false,\n                false,\n                false,\n                false\n            ]\n        ];\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 1; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                let k = j;\n                while(k > 0 && (this.state[i][k - 1] === 0 || this.state[i][k - 1] === this.state[i][k])){\n                    if (this.state[i][k - 1] === 0) {\n                        this.state[i][k - 1] = this.state[i][k];\n                        this.state[i][k] = 0;\n                        moved = true;\n                        k--;\n                    } else if (this.state[i][k - 1] === this.state[i][k] && !this.isMerged[i][k - 1]) {\n                        this.state[i][k - 1] *= 2;\n                        this.state[i][k] = 0;\n                        this.score += this.state[i][k - 1];\n                        this.isMerged[i][k - 1] = true;\n                        moved = true;\n                    } else break;\n                }\n            }\n        }\n        if (moved) {\n            this.isMerged.forEach((row)=>row.fill(false));\n            this.generateNewTiles();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = this.state[i].length - 2; j >= 0; j--)if (this.state[i][j] !== 0) {\n                let k = j;\n                while(k < this.state[i].length - 1 && (this.state[i][k + 1] === 0 || this.state[i][k + 1] === this.state[i][k])){\n                    if (this.state[i][k + 1] === 0) {\n                        this.state[i][k + 1] = this.state[i][k];\n                        this.state[i][k] = 0;\n                        moved = true;\n                        k++;\n                    } else if (this.state[i][k + 1] === this.state[i][k] && !this.isMerged[i][k + 1]) {\n                        this.state[i][k + 1] *= 2;\n                        this.score += this.state[i][k + 1];\n                        this.state[i][k] = 0;\n                        moved = true;\n                        this.isMerged[i][k + 1] = true;\n                    } else break;\n                }\n            }\n        }\n        if (moved) {\n            this.isMerged.forEach((row)=>row.fill(false));\n            this.generateNewTiles();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = 1; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                let k = i;\n                while(k > 0 && (this.state[k - 1][j] === 0 || this.state[k - 1][j] === this.state[k][j])){\n                    if (this.state[k - 1][j] === 0) {\n                        this.state[k - 1][j] = this.state[k][j];\n                        this.state[k][j] = 0;\n                        moved = true;\n                        k--;\n                    } else if (this.state[k - 1][j] === this.state[k][j] && !this.isMerged[k - 1][j]) {\n                        this.state[k - 1][j] *= 2;\n                        this.score += this.state[k - 1][j];\n                        this.state[k][j] = 0;\n                        moved = true;\n                        this.isMerged[k - 1][j] = true;\n                    } else break;\n                }\n            }\n        }\n        if (moved) {\n            this.isMerged.forEach((row)=>row.fill(false));\n            this.generateNewTiles();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        for(let i = this.state.length - 2; i >= 0; i--){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] !== 0) {\n                let k = i;\n                while(k < this.state.length - 1 && (this.state[k + 1][j] === 0 || this.state[k + 1][j] === this.state[k][j])){\n                    if (this.state[k + 1][j] === 0) {\n                        this.state[k + 1][j] = this.state[k][j];\n                        this.state[k][j] = 0;\n                        moved = true;\n                        k++;\n                    } else if (this.state[k + 1][j] === this.state[k][j] && !this.isMerged[k + 1][j]) {\n                        this.state[k + 1][j] *= 2;\n                        this.score += this.state[k + 1][j];\n                        this.state[k][j] = 0;\n                        moved = true;\n                        this.isMerged[k + 1][j] = true;\n                    } else break;\n                }\n            }\n        }\n        if (moved) {\n            this.isMerged.forEach((row)=>row.fill(false));\n            this.generateNewTiles();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        this.getStatus();\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        if (this.state.some((row)=>row.includes(2048))) this.status = \"win\";\n        if (!this.canMove()) this.status = \"lose\";\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.status = \"playing\";\n        this.generateNewTiles();\n        this.generateNewTiles();\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.score = 0;\n        this.status = \"idle\";\n        this.state = this.initialStateRestart.map((row)=>[\n                ...row\n            ]);\n    }\n    // Add your own methods here\n    generateNewTiles() {\n        if (this.status === \"win\" || this.status === \"lose\") return;\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                row: i,\n                col: j\n            });\n        }\n        if (emptyCells.length > 0) {\n            const randomIndex = Math.floor(Math.random() * emptyCells.length);\n            const { row: row, col: col } = emptyCells[randomIndex];\n            this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n        }\n    }\n    canMove() {\n        for(let i = 0; i < this.state.length; i++)for(let j = 0; j < this.state[i].length; j++){\n            if (this.state[i][j] === 0 || j < this.state[i].length - 1 && this.state[i][j] === this.state[i][j + 1] || i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j]) return true;\n        }\n        return false;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nfunction $09e991522ca7e64e$var$initializeGame() {\n    const buttonStart = document.querySelector(\".start\");\n    buttonStart.addEventListener(\"click\", ()=>{\n        if (buttonStart.classList.contains(\"start\")) {\n            $09e991522ca7e64e$var$game.start();\n            buttonStart.classList.remove(\"start\");\n            buttonStart.classList.add(\"restart\");\n            buttonStart.textContent = \"Restart\";\n        } else {\n            $09e991522ca7e64e$var$game.restart();\n            buttonStart.classList.remove(\"restart\");\n            buttonStart.classList.add(\"start\");\n            buttonStart.textContent = \"Start\";\n        }\n        $09e991522ca7e64e$var$updateUI();\n    });\n    document.addEventListener(\"keydown\", (eventKey)=>{\n        if ([\n            \"ArrowLeft\",\n            \"ArrowRight\",\n            \"ArrowUp\",\n            \"ArrowDown\"\n        ].includes(eventKey.key)) eventKey.preventDefault();\n        if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n            switch(eventKey.key){\n                case \"ArrowLeft\":\n                    $09e991522ca7e64e$var$game.moveLeft();\n                    break;\n                case \"ArrowRight\":\n                    $09e991522ca7e64e$var$game.moveRight();\n                    break;\n                case \"ArrowUp\":\n                    $09e991522ca7e64e$var$game.moveUp();\n                    break;\n                case \"ArrowDown\":\n                    $09e991522ca7e64e$var$game.moveDown();\n                    break;\n            }\n            $09e991522ca7e64e$var$updateUI();\n            $09e991522ca7e64e$var$game.getStatus();\n        }\n    });\n}\nfunction $09e991522ca7e64e$var$updateUI() {\n    const scoreElement = document.querySelector(\".game-score\");\n    scoreElement.textContent = $09e991522ca7e64e$var$game.getScore();\n    const state = $09e991522ca7e64e$var$game.getState();\n    const cells = document.querySelectorAll(\".field-cell\");\n    let index = 0;\n    for(let i = 0; i < state.length; i++)for(let j = 0; j < state[i].length; j++){\n        cells[index].textContent = state[i][j] !== 0 ? state[i][j] : \"\";\n        cells[index].className = \"field-cell\";\n        if (state[i][j] !== 0) cells[index].classList.add(`field-cell--${state[i][j]}`);\n        index++;\n    }\n    const gameStatus = $09e991522ca7e64e$var$game.getStatus();\n    const messageStart = document.querySelector(\".message-start\");\n    const messageWin = document.querySelector(\".message-win\");\n    const messageLose = document.querySelector(\".message-lose\");\n    if (gameStatus === \"playing\") messageStart.classList.add(\"hidden\");\n    else if (gameStatus === \"win\") messageWin.classList.remove(\"hidden\");\n    else if (gameStatus === \"lose\") messageLose.classList.remove(\"hidden\");\n    else {\n        messageStart.classList.remove(\"hidden\");\n        messageWin.classList.add(\"hidden\");\n        messageLose.classList.add(\"hidden\");\n    }\n}\ndocument.addEventListener(\"DOMContentLoaded\", $09e991522ca7e64e$var$initializeGame);\n\n\n//# sourceMappingURL=index.88845e94.js.map\n","/* eslint-disable brace-style */\n/* eslint-disable prettier/prettier */\n'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nfunction initializeGame()\n{\n  const buttonStart = document.querySelector('.start');\n\n  buttonStart.addEventListener('click', () =>\n  {\n    if (buttonStart.classList.contains('start'))\n    {\n      game.start();\n      buttonStart.classList.remove('start');\n      buttonStart.classList.add('restart');\n      buttonStart.textContent = 'Restart';\n    }\n    else\n    {\n      game.restart();\n      buttonStart.classList.remove('restart');\n      buttonStart.classList.add('start');\n      buttonStart.textContent = 'Start';\n    }\n\n    updateUI();\n  });\n\n  document.addEventListener('keydown', (eventKey) =>\n  {\n    if (\n      ['ArrowLeft', 'ArrowRight', 'ArrowUp', 'ArrowDown'].includes(eventKey.key)\n    )\n    {\n      eventKey.preventDefault();\n    }\n\n    if (game.getStatus() === 'playing')\n    {\n      switch (eventKey.key)\n      {\n        case 'ArrowLeft':\n          game.moveLeft();\n          break;\n        case 'ArrowRight':\n          game.moveRight();\n          break;\n        case 'ArrowUp':\n          game.moveUp();\n          break;\n        case 'ArrowDown':\n          game.moveDown();\n          break;\n      }\n      updateUI();\n      game.getStatus();\n    }\n  });\n}\n\nfunction updateUI()\n{\n  const scoreElement = document.querySelector('.game-score');\n\n  scoreElement.textContent = game.getScore();\n\n  const state = game.getState();\n\n  const cells = document.querySelectorAll('.field-cell');\n  let index = 0;\n\n  for (let i = 0; i < state.length; i++)\n  {\n    for (let j = 0; j < state[i].length; j++)\n    {\n      cells[index].textContent = state[i][j] !== 0 ? state[i][j] : '';\n      cells[index].className = 'field-cell';\n\n      if (state[i][j] !== 0)\n      {\n        cells[index].classList.add(`field-cell--${state[i][j]}`);\n      }\n      index++;\n    }\n  }\n\n  const gameStatus = game.getStatus();\n\n  const messageStart = document.querySelector('.message-start');\n  const messageWin = document.querySelector('.message-win');\n  const messageLose = document.querySelector('.message-lose');\n\n  if (gameStatus === 'playing')\n  {\n    messageStart.classList.add('hidden');\n  }\n  else if (gameStatus === 'win')\n  {\n    messageWin.classList.remove('hidden');\n  }\n  else if (gameStatus === 'lose')\n  {\n    messageLose.classList.remove('hidden');\n  }\n  else\n  {\n    messageStart.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageLose.classList.add('hidden');\n  }\n}\n\ndocument.addEventListener('DOMContentLoaded', initializeGame);\n","/* eslint-disable max-len */\n/* eslint-disable prettier/prettier */\n/* eslint-disable brace-style */\n'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game\n{\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState)\n  {\n    this.initialState = initialState;\n\n    this.initialStateRestart = initialState ? initialState.map(row => row.map(cell => cell)) : [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.state = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.score = 0;\n    this.status = 'idle';\n\n    this.isMerged = [\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n      [false, false, false, false],\n    ];\n  }\n\n  moveLeft()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = 1; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = j;\n\n          while (k > 0 && (this.state[i][k - 1] === 0 || this.state[i][k - 1] === this.state[i][k]))\n          {\n            if (this.state[i][k - 1] === 0)\n            {\n              this.state[i][k - 1] = this.state[i][k];\n              this.state[i][k] = 0;\n              moved = true;\n              k--;\n            }\n            else if (this.state[i][k - 1] === this.state[i][k] && !this.isMerged[i][k - 1])\n            {\n              this.state[i][k - 1] *= 2;\n              this.state[i][k] = 0;\n              this.score += this.state[i][k - 1];\n              this.isMerged[i][k - 1] = true;\n              moved = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n  }\n\n  moveRight()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = this.state[i].length - 2; j >= 0; j--)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = j;\n\n          while (k < this.state[i].length - 1 && (this.state[i][k + 1] === 0 || this.state[i][k + 1] === this.state[i][k]))\n          {\n            if (this.state[i][k + 1] === 0)\n            {\n              this.state[i][k + 1] = this.state[i][k];\n              this.state[i][k] = 0;\n              moved = true;\n              k++;\n            }\n            else if (this.state[i][k + 1] === this.state[i][k] && !this.isMerged[i][k + 1])\n            {\n              this.state[i][k + 1] *= 2;\n              this.score += this.state[i][k + 1];\n              this.state[i][k] = 0;\n              moved = true;\n              this.isMerged[i][k + 1] = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n  }\n\n  moveUp()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = 1; i < this.state.length; i++)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = i;\n\n          while (k > 0 && (this.state[k - 1][j] === 0 || this.state[k - 1][j] === this.state[k][j]))\n          {\n            if (this.state[k - 1][j] === 0)\n            {\n              this.state[k - 1][j] = this.state[k][j];\n              this.state[k][j] = 0;\n              moved = true;\n              k--;\n            }\n            else if (this.state[k - 1][j] === this.state[k][j] && !this.isMerged[k - 1][j])\n            {\n              this.state[k - 1][j] *= 2;\n              this.score += this.state[k - 1][j];\n              this.state[k][j] = 0;\n              moved = true;\n              this.isMerged[k - 1][j] = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n  }\n\n  moveDown()\n  {\n    if (this.status !== 'playing')\n    {\n      return;\n    }\n\n    let moved = false;\n\n    for (let i = this.state.length - 2; i >= 0; i--)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] !== 0)\n        {\n          let k = i;\n\n          while (k < this.state.length - 1 && (this.state[k + 1][j] === 0 || this.state[k + 1][j] === this.state[k][j]))\n          {\n            if (this.state[k + 1][j] === 0)\n            {\n              this.state[k + 1][j] = this.state[k][j];\n              this.state[k][j] = 0;\n              moved = true;\n              k++;\n            }\n            else if (this.state[k + 1][j] === this.state[k][j] && !this.isMerged[k + 1][j])\n            {\n              this.state[k + 1][j] *= 2;\n              this.score += this.state[k + 1][j];\n              this.state[k][j] = 0;\n              moved = true;\n              this.isMerged[k + 1][j] = true;\n            }\n            else\n            {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    if (moved)\n    {\n      this.isMerged.forEach(row => row.fill(false));\n      this.generateNewTiles();\n    }\n\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore()\n  {\n    return this.score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState()\n  {\n    this.getStatus();\n\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus()\n  {\n    if (this.state.some(row => row.includes(2048)))\n    {\n      this.status = 'win';\n    }\n\n    if (!this.canMove())\n    {\n      this.status = 'lose';\n    }\n\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start()\n  {\n    this.status = 'playing';\n    this.generateNewTiles();\n    this.generateNewTiles();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart()\n  {\n    this.score = 0;\n    this.status = 'idle';\n    this.state = this.initialStateRestart.map(row => [...row]);\n  }\n\n  // Add your own methods here\n  generateNewTiles()\n  {\n\n    if (this.status === 'win' || this.status === 'lose')\n    {\n      return;\n    }\n\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (this.state[i][j] === 0)\n        {\n          emptyCells.push({\n            row: i,\n            col: j,\n          });\n        }\n      }\n    }\n\n    if (emptyCells.length > 0)\n    {\n      const randomIndex = Math.floor(Math.random() * emptyCells.length);\n      const { row, col } = emptyCells[randomIndex];\n\n      this.state[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  canMove()\n  {\n    for (let i = 0; i < this.state.length; i++)\n    {\n      for (let j = 0; j < this.state[i].length; j++)\n      {\n        if (\n          this.state[i][j] === 0\n          || (j < this.state[i].length - 1 && this.state[i][j] === this.state[i][j + 1])\n          || (i < this.state.length - 1 && this.state[i][j] === this.state[i + 1][j])\n        )\n        {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","initialStateRestart","map","row","cell","state","score","status","isMerged","moveLeft","moved","i","length","j","k","forEach","fill","generateNewTiles","moveRight","moveUp","moveDown","getScore","getState","getStatus","some","includes","canMove","start","restart","emptyCells","push","col","randomIndex","Math","floor","random","$09e991522ca7e64e$var$updateUI","scoreElement","document","querySelector","textContent","cells","querySelectorAll","index","className","classList","add","gameStatus","messageStart","messageWin","messageLose","remove","addEventListener","buttonStart","contains","eventKey","key","preventDefault"],"version":3,"file":"index.88845e94.js.map"}